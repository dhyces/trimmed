plugins {
	id 'idea'
	id 'java'
	id 'maven-publish'
	alias libs.plugins.curseforgegradle
	alias libs.plugins.minotaur
	alias libs.plugins.archloom
}

base {
	archivesName = "${mod_name}-neo-${libs.versions.minecraft.release.get()}"
}

loom {
	runs {
		client {
			client()
			setConfigName("Neo Client")
			ideConfigGenerated(true)
			runDir("run")
		}
		server {
			server()
			setConfigName("Neo Server")
			ideConfigGenerated(true)
			runDir("run")
		}
		data {
			data()
			setConfigName("Neo Data")
			ideConfigGenerated(true)
			runDir("run")

			programArgs("'--mod', ${mod_id}, '--all', '--output', ${project(":Common").file('src/generated/resources/')}, '--existing', ${file('src/main/resources/')}")
		}
	}
}

repositories {
	maven {
		name = 'Neo'
		url = 'https://maven.neoforged.net/releases'
	}
}

dependencies {
	minecraft libs.minecraft
	neoForge libs.neoforge
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${libs.versions.parchment.mc.get()}:${libs.versions.parchment.release.get()}@zip")
	}

	compileOnly(project(":Common"))
}

tasks.withType(JavaCompile).configureEach {
	source(project(":Common").sourceSets.main.allSource)
	it.options.encoding = 'UTF-8'
	it.options.release = 17
}

tasks.withType(GenerateModuleMetadata).configureEach {
	enabled = false
}

java {
	toolchain.languageVersion = JavaLanguageVersion.of(17)
	withSourcesJar()
	withJavadocJar()
	sourcesJar {
		from(rootProject.file("LICENSE")) {
			rename { "${it}_${mod_id}" }
		}
	}
}

processResources {
	from project(":Common").sourceSets.main.resources
	exclude("trimmed.accesswidener")
}

publishing {
	publications {
		register('mavenJava', MavenPublication) {
			groupId project.maven_group
			artifactId project.archivesBaseName
			version project.mod_version
			from components.java
			pom.withXml {
				asNode().remove(asNode().dependencies)
			}
		}
	}
}