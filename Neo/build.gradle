plugins {
	id 'idea'
	id 'java'
	id 'maven-publish'
	alias libs.plugins.curseforgegradle
	alias libs.plugins.minotaur
	alias libs.plugins.archloom
}

base {
	archivesName = "${mod_name}-neo-${libs.versions.minecraft.release.get()}"
}

loom {
	runs {
		client {
			client()
			setConfigName("Neo Client")
			ideConfigGenerated(true)
			runDir("run")
		}
		server {
			server()
			setConfigName("Neo Server")
			ideConfigGenerated(true)
			runDir("run")
		}
		data {
			data()
			setConfigName("Neo Data")
			ideConfigGenerated(true)
			runDir("run")

			programArgs("'--mod', ${mod_id}, '--all', '--output', ${project(":Common").file('src/generated/resources/')}, '--existing', ${file('src/main/resources/')}")
		}
	}
}

//remapJar {
//	atAccessWideners.add('src/main/resources/trimmed.accesswidener')
//}

repositories {
	maven {
		name = 'Neo'
		url = 'https://maven.neoforged.net/releases'
	}
}

dependencies {
	minecraft libs.minecraft
	neoForge libs.neoforge
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${libs.versions.parchment.mc.get()}:${libs.versions.parchment.release.get()}@zip")
	}

	compileOnly(project(":Common"))
}

tasks.withType(JavaCompile).configureEach {
	source(project(":Common").sourceSets.main.allSource)
}

processResources {
	from project(":Common").sourceSets.main.resources
	exclude("mods.groovy", "trimmed.accesswidener")
}

java {
	withSourcesJar()
	withJavadocJar()
}

sourcesJar {
	from(rootProject.file("LICENSE")) {
		rename { "${it}_${mod_name}" }
	}
}

publishing {
	publications {
		register('mavenJava', MavenPublication) {
			groupId project.maven_group
			artifactId project.archivesBaseName
			version project.mod_version
			from components.java
			pom.withXml {
				asNode().remove(asNode().dependencies)
			}
		}
	}
}

if (findProperty("modrinth_write_version_pat")) {
	modrinth {
		token = findProperty("modrinth_write_version_pat")
		projectId = modrinth_project_id
		versionName = "NeoForge-${libs.versions.minecraft.release.get()}-${mod_version}"
		versionNumber = "${libs.versions.minecraft.release.get()}-${mod_version}+neoforge"
		versionType = publish_type
		uploadFile = remapJar
		gameVersions = List.of(libs.versions.publish.range.get().split(","))
		loaders = ["neoforge"]
		changelog = rootProject.file("changelog.md").newReader().text
		additionalFiles = [sourcesJar, javadocJar]
		detectLoaders = false
		debugMode = publish_debug == "true"
	}
}

import net.darkhax.curseforgegradle.TaskPublishCurseForge

if (findProperty("curseforge_publishing_token")) {
	tasks.register("curseforge", TaskPublishCurseForge) {
		group = "publishing"

		disableVersionDetection()
		apiToken = findProperty('curseforge_publishing_token')
		def projectId = curseforge_project_id
		def mainFile = upload(projectId, remapJar)
		mainFile.displayName = "NeoForge-${libs.versions.minecraft.release.get()}-${mod_version}"
		mainFile.releaseType = publish_type
		mainFile.changelog = rootProject.file("changelog.md").newReader().text
		mainFile.changelogType = 'markdown'
		mainFile.addModLoader("NeoForge")
		mainFile.addJavaVersion("Java ${java.toolchain.languageVersion.get()}")
		mainFile.addGameVersion(libs.versions.minecraft.release.get())
		debugMode = publish_debug == "true"
	}

	afterEvaluate {
		tasks.curseforge.dependsOn tasks.remapJar
	}
}