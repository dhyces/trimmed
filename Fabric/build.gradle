plugins {
    id 'idea'
    id 'java'
    id 'maven-publish'
    alias libs.plugins.archloom
    alias libs.plugins.curseforgegradle
    alias libs.plugins.minotaur
}

base {
    archivesName = "${mod_id}-fabric-${libs.versions.minecraft.release.get()}"
}

loom {
    accessWidenerPath = project(":Common").file("src/main/resources/trimmed.accesswidener")

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }

    mixin {
        defaultRefmapName = "${mod_id}.refmap.json"
    }

    mods {
        trimmed {
            sourceSet sourceSets.main
            sourceSet project(":Common").sourceSets.main
        }
    }
}

dependencies {
    minecraft libs.minecraft
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${libs.versions.parchment.mc.get()}:${libs.versions.parchment.release.get()}@zip")
    }

    modImplementation libs.fabric.loader
    modImplementation(libs.fabric.api) {
        exclude module: "fabric-models-v0"
    }

    implementation project(path: ":Common", configuration: "namedElements")
}

idea {
    module {
        inheritOutputDirs = false
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
    exclude("mods.groovy")
}

java {
    withSourcesJar()
    withJavadocJar()
}

sourcesJar {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_${mod_name}" }
    }
}

sourcesJar {
    from(project(":Common").sourceSets.main.allSource)
    exclude("mods.groovy")
}

publishing {
    publications {
        register("mavenJava", MavenPublication) {
            groupId project.maven_group
            artifactId project.archivesBaseName
            version project.mod_version
            from components.java
            pom.withXml {
                asNode().remove(asNode().dependencies)
            }
        }
    }
}

if (findProperty("modrinth_write_version_pat")) {
    modrinth {
        token = findProperty("modrinth_write_version_pat")
        projectId = modrinth_project_id
        versionName = "Fabric-${libs.versions.minecraft.release.get()}-${mod_version}"
        versionNumber = "${libs.versions.minecraft.release.get()}-${mod_version}+fabric"
        versionType = publish_type
        uploadFile = remapJar
        gameVersions = List.of(libs.versions.publish.range.get().split(","))
        loaders = ["fabric"]
        changelog = rootProject.file("changelog.md").newReader().text
        additionalFiles = [sourcesJar, javadocJar]
        detectLoaders = false
        debugMode = publish_debug == "true"
    }
}

import net.darkhax.curseforgegradle.TaskPublishCurseForge

if (findProperty("curseforge_publishing_token")) {
    tasks.register("curseforge", TaskPublishCurseForge) {
        group = "publishing"

        disableVersionDetection()
        apiToken = findProperty('curseforge_publishing_token')
        def projectId = curseforge_project_id
        def mainFile = upload(projectId, remapJar)
        mainFile.displayName = "Fabric-${libs.versions.minecraft.release.get()}-${mod_version}"
        mainFile.releaseType = publish_type
        mainFile.changelog = rootProject.file("changelog.md").newReader().text
        mainFile.changelogType = 'markdown'
        mainFile.addModLoader("Fabric")
        mainFile.addJavaVersion("Java ${java.toolchain.languageVersion.get()}")
        mainFile.addGameVersion(libs.versions.minecraft.release.get())
        debugMode = publish_debug == "true"
    }

    afterEvaluate {
        tasks.curseforge.dependsOn tasks.remapJar
    }
}