plugins {
	id 'idea'
	id 'java'
	id 'maven-publish'
	alias libs.plugins.forgegradle
	alias libs.plugins.librarian
	alias libs.plugins.mixingradle
}

archivesBaseName = "${mod_id}-forge-${libs.versions.minecraft}"

sourceSets {
	main
	test
	datagen {
		compileClasspath = project.configurations.compileClasspath
		runtimeClasspath = project.configurations.runtimeClasspath
	}
}

minecraft {
	mappings channel: 'parchment', version: rootProject.ext.parchmentVersion

	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			workingDirectory file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			taskName 'Client'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			mods {
				modClientRun {
					source sourceSets.main
					source project(":Common").sourceSets.main
				}
			}
		}

		server {
			workingDirectory file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			taskName 'Server'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			mods {
				modServerRun {
					source sourceSets.main
					source project(":Common").sourceSets.main
				}
			}
		}

		data {
			workingDirectory file('run')
			ideaModule "${rootProject.name}.${project.name}.datagen"
			args '--mod', mod_id, '--all', '--output', project(":Common").file('src/generated/resources/'), '--existing', file('src/main/resources/')
			taskName 'Data'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			mods {
				modDataRun {
					source sourceSets.main
					source sourceSets.datagen
					source project(":Common").sourceSets.main
				}
			}
		}
	}
}

jarJar.enable()

repositories {
	mavenCentral()
}

dependencies {
	minecraft libs.forge

	implementation(libs.mixinextras.common)
	annotationProcessor(libs.mixinextras.common)
	implementation(libs.mixinextras.forge)
	jarJar(libs.mixinextras.forge) {
		jarJar.ranged(it, "[${libs.versions.mixinextras.get()},)")
	}

	compileOnly(project(":Common"))

	annotationProcessor "${libs.versions.mixin.get()}:processor"
}

mixin {
	add sourceSets.main, 'trimmed.refmap.json'

	config 'trimmed.forge.mixins.json'
	config 'trimmed.mixins.json'

	debug.verbose = true
	debug.export = true
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 17
}

tasks.withType(GenerateModuleMetadata) {
	enabled = false
}

java {
	toolchain.languageVersion = JavaLanguageVersion.of(17)
	withSourcesJar()
	withJavadocJar()
	sourcesJar {
		from(rootProject.file("LICENSE")) {
			rename { "${it}_${mod_id}" }
		}
	}
}

tasks.withType(JavaCompile) {
	source(project(":Common").sourceSets.main.allSource)
}

processResources {
	from project(":Common").sourceSets.main.resources
	exclude("trimmed.accesswidener")
}

jar.finalizedBy('reobfJar')


jar {
	from(rootProject.file("LICENSE")) {
		rename { "${it}_${mod_id}" }
	}
	manifest {
		attributes([
				'Specification-Title'     : mod_id,
				'Specification-Vendor'    : mod_author,
				'Specification-Version'   : project.jar.archiveVersion,
				'Implementation-Title'    : project.name,
				'Implementation-Version'  : project.jar.archiveVersion,
				'Implementation-Vendor'   : mod_author,
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				'Timestamp'               : System.currentTimeMillis(),
				'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
				'Built-On-Minecraft'      : libs.versions.minecraft.release
		])
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId project.maven_group
			artifactId project.archivesBaseName
			version project.mod_version
			from components.java
			pom.withXml {
				asNode().remove(asNode().dependencies)
			}
		}
	}
}