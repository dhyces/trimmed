plugins {
	id 'idea'
	id 'java'
	id 'maven-publish'
	alias libs.plugins.curseforgegradle
	alias libs.plugins.minotaur
	alias libs.plugins.forgegradle
	alias libs.plugins.librarian
	alias libs.plugins.mixingradle
}

base {
	archivesName = "${mod_id}-forge-${libs.versions.minecraft.release.get()}"
}

// compileTestJava fails from MixinExtras not being present if this is missing
configurations {
	testCompileOnly.extendsFrom(compileOnly)
}

sourceSets {
	main
	test
	datagen {
		compileClasspath = project.configurations.compileClasspath
		runtimeClasspath = project.configurations.runtimeClasspath
	}
}

minecraft {
	mappings channel: 'parchment', version: rootProject.ext.parchmentVersion

	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	copyIdeResources = true

	runs {
		client {
			workingDirectory file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			taskName 'Client'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			mods {
				modClientRun {
					source sourceSets.main
					source project(":Common").sourceSets.main
				}
			}
		}

		server {
			workingDirectory file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			taskName 'Server'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			mods {
				modServerRun {
					source sourceSets.main
					source project(":Common").sourceSets.main
				}
			}
		}

		data {
			workingDirectory file('run')
			ideaModule "${rootProject.name}.${project.name}.datagen"
			args '--mod', mod_id, '--all', '--output', project(":Common").file('src/generated/resources/'), '--existing', file('src/main/resources/')
			taskName 'Data'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			mods {
				modDataRun {
					source sourceSets.main
					source sourceSets.datagen
					source project(":Common").sourceSets.main
				}
			}
		}
	}
}

mixin {
	add sourceSets.main, 'trimmed.refmap.json'

	config 'trimmed.forge.mixins.json'
	config 'trimmed.mixins.json'

	debug.verbose = true
	debug.export = true
}

jarJar.enable()

repositories {
	mavenCentral()
}

dependencies {
	minecraft libs.forge

	compileOnly(annotationProcessor(libs.mixinextras.common.get()))
	implementation(jarJar(libs.mixinextras.forge.get()) {
		jarJar.ranged(it, "[${libs.versions.mixinextras.get()},)")
	})

	compileOnly(project(path: ":Common", configuration: "namedElements"))

	annotationProcessor("${libs.sponge.mixin.get()}:processor")
}

tasks.withType(JavaCompile).configureEach {
	source(project(":Common").sourceSets.main.allSource)
}

processResources {
	from project(":Common").sourceSets.main.resources
	exclude("trimmed.accesswidener")
}

java {
	withSourcesJar()
	withJavadocJar()
}

sourcesJar {
	from(rootProject.file("LICENSE")) {
		rename { "${it}_${mod_name}" }
	}
}

jar.finalizedBy('reobfJar')

publishing {
	publications {
		register('mavenJava', MavenPublication) {
			groupId project.maven_group
			artifactId project.archivesBaseName
			version project.mod_version
			from components.java
			pom.withXml {
				asNode().remove(asNode().dependencies)
			}
		}
	}
}

sourceSets.each {
	def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
	it.output.resourcesDir = dir
	it.java.destinationDirectory = dir
}

if (findProperty("modrinth_write_version_pat")) {
	modrinth {
		token = findProperty("modrinth_write_version_pat")
		projectId = modrinth_project_id
		versionName = "Forge-${libs.versions.minecraft.release.get()}-${mod_version}"
		versionNumber = "${libs.versions.minecraft.release.get()}-${mod_version}+forge"
		versionType = publish_type
		uploadFile = jar
		gameVersions = List.of(libs.versions.publish.range.get().split(","))
		loaders = ["forge"]
		changelog = rootProject.file("changelog.md").newReader().text
		additionalFiles = [sourcesJar, javadocJar]
		detectLoaders = false
		debugMode = publish_debug == "true"
	}
}

import net.darkhax.curseforgegradle.TaskPublishCurseForge

if (findProperty("curseforge_publishing_token")) {
	tasks.register("curseforge", TaskPublishCurseForge) {
		group = "publishing"

		disableVersionDetection()
		apiToken = findProperty('curseforge_publishing_token')
		def projectId = curseforge_project_id
		def mainFile = upload(projectId, jar)
		mainFile.displayName = "Forge-${libs.versions.minecraft.release.get()}-${mod_version}"
		mainFile.releaseType = publish_type
		mainFile.changelog = rootProject.file("changelog.md").newReader().text
		mainFile.changelogType = 'markdown'
		mainFile.addModLoader("Forge")
		mainFile.addJavaVersion("Java ${java.toolchain.languageVersion.get()}")
		mainFile.addGameVersion(libs.versions.minecraft.release.get())
		debugMode = publish_debug == "true"
	}
}