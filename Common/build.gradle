plugins {
    id 'idea'
    id 'java'
    id 'maven-publish'
    alias libs.plugins.archloom
}

archivesBaseName = "${mod_id}-common-${libs.versions.minecraft}"

configurations {
    commonJava {
        canBeResolved = false
        canBeConsumed = true
    }
    commonResources {
        canBeResolved = false
        canBeConsumed = true
    }
    testCompileOnly.extendsFrom(compileOnly)
}

loom {
    accessWidenerPath = file("src/main/resources/trimmed.accesswidener")

    runConfigs.configureEach {
        ideConfigGenerated = false
    }
}

dependencies {
    minecraft libs.minecraft
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${libs.versions.parchment.mc.get()}:${libs.versions.parchment.release.get()}@zip")
    }

    modCompileOnly libs.fabric.loader

    implementation(annotationProcessor(libs.mixinextras.common.get()))
}

artifacts {
    commonJava sourceSets.main.java.sourceDirectories.singleFile
    commonResources sourceSets.main.resources.sourceDirectories.singleFile
}

sourceSets.main.resources.srcDir 'src/generated/resources'

idea {
    module {
        inheritOutputDirs = false
    }
}

import net.fabricmc.loom.task.AbstractRemapJarTask
tasks.withType(AbstractRemapJarTask).each {
    it.targetNamespace = "named"
}

processResources {
    def buildProps = project.properties.clone()

    filesMatching(['pack.mcmeta']) {
        expand buildProps
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.maven_group
            artifactId project.archivesBaseName
            version project.mod_version
            from components.java
            pom.withXml {
                asNode().remove(asNode().dependencies)
            }
        }
    }
}