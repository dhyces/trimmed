plugins {
	id 'idea'
	id 'java'
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version '5.1.+'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
	id 'org.spongepowered.mixin' version '0.7.+'
}

archivesBaseName = "${mod_id}-forge-${minecraft_version}"

minecraft {
	mappings channel: 'parchment', version: project.parchment_version

	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			workingDirectory project.file('run')
			ideaModule "${project.name}.main"
			taskName 'Client'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			mods {
				modClientRun {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')
			ideaModule "${project.name}.main"
			taskName 'Server'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			mods {
				modServerRun {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')
			ideaModule "${project.name}.main"
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			taskName 'Data'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			mods {
				modDataRun {
					source sourceSets.main
				}
			}
		}
	}
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

mixin {
	add sourceSets.main, 'trimmed.refmap.json'
	config 'trimmed.mixins.json'

	debug.verbose = true
	debug.export = true
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 17
}

tasks.withType(GenerateModuleMetadata) {
	enabled = false
}

java {
	toolchain.languageVersion = JavaLanguageVersion.of(17)
	withSourcesJar()
	withJavadocJar()
	sourcesJar {
		from(rootProject.file("LICENSE")) {
			rename { "${it}_${mod_id}" }
		}
	}
}

jar.finalizedBy('reobfJar')


jar {
	from(rootProject.file("LICENSE")) {
		rename { "${it}_${mod_id}" }
	}
	manifest {
		attributes([
				'Specification-Title'     : mod_id,
				'Specification-Vendor'    : mod_author,
				'Specification-Version'   : project.jar.archiveVersion,
				'Implementation-Title'    : project.name,
				'Implementation-Version'  : project.jar.archiveVersion,
				'Implementation-Vendor'   : mod_author,
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				'Timestamp'               : System.currentTimeMillis(),
				'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
				'Built-On-Minecraft'      : minecraft_version
		])
	}
}

publishing {
	repositories {
		maven {
			url "file://" + findProperty("local_maven")
		}
	}
	publications {
		mavenJava(MavenPublication) {
			groupId project.maven_group
			artifactId project.archivesBaseName
			version project.mod_version
			from components.java
			pom.withXml {
				asNode().dependencies.dependency.each { dep ->
					dep.parent().remove(dep)
				}
			}
		}
	}
}